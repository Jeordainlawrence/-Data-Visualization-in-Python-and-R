# -*- coding: utf-8 -*-
"""Data Science Assignment 1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BerXuqqAUOkmW_pqQ1nV4WurY6ZQtEwM
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

#from google.colab import files

#Upload and load the dataset - It could not locate the file while trying to load in the file- as such I used the import file option
#uploaded = files.upload()
df = pd.read_csv("cleaned_movies.csv.csv")  # Make sure the file name matches
df.head()  # View first few rows to understand the structure

print("Question 1 Plot a graph to show the number of movies by year.")
#df = pd.read_csv('cleaned_movies.csv')

# Group by 'YEAR' and count the number of movies
movies_per_year = df['YEAR'].value_counts().sort_index()

# Plotting the number of movies by year
plt.figure(figsize=(12, 6))
plt.plot(movies_per_year.index, movies_per_year.values, marker='o', linestyle='-', color='teal')
plt.title('Number of Movies Released by Year')
plt.xlabel('Year')
plt.ylabel('Number of Movies')
plt.grid(True)
plt.tight_layout()
plt.show()

print("Question 2 Plot a graph to show movies number of movies by genre")
# Remove rows where the 'GENRE' column is missing
df_cleaned = df.dropna(subset=['GENRE'])

#  Split genre strings into lists (e.g., "Action, Drama") and explode them into individual rows
# So each genre in a multi-genre movie is counted separately
all_genres = df_cleaned['GENRE'].str.split(', ').explode()

#Count how many times each genre appears
genre_counts = all_genres.value_counts()


plt.figure(figsize=(14, 7))  # Set the size of the figure (width, height in inches)
plt.bar(genre_counts.index, genre_counts.values, color='skyblue', edgecolor='black')  # Create the bars


plt.title('Number of Movies by Genre')  # Add chart title
plt.xlabel('Genre')                     # Label x-axis
plt.ylabel('Number of Movies')          # Label y-axis
plt.xticks(rotation=45, ha='right')     # Rotate x-axis labels to prevent overlap
plt.tight_layout()                      # Automatically adjust subplot to fit labels
plt.show()                              # Display the final plot

print("Question 3 - Show the distributions ratings of the movies in the database")

# Drop rows with missing ratings to ensure clean data
df_ratings = df.dropna(subset=['RATING'])

# Step 2: Plot the distribution of movie ratings as a histogram
plt.figure(figsize=(10, 6))  # Set the figure size
plt.hist(df_ratings['RATING'], bins=20, color='green', edgecolor='black')  # Histogram with 20 bins

# Step 3: Add titles and labels
plt.title('Distribution of Movie Ratings')  # Title of the plot
plt.xlabel('Rating')                        # X-axis label
plt.ylabel('Number of Movies')              # Y-axis label
plt.grid(True)                              # Add a grid for better readability
plt.tight_layout()                          # Adjust layout
plt.show()                                  # Display the plot

print("Question 4 Show the top ten rated movies in the database")

# Drop rows with missing values in 'RATING' or 'MOVIES'
df_valid_ratings = df.dropna(subset=['RATING', 'MOVIES'])

# Sort the DataFrame by rating in descending order and take the top 10
top_10_movies = df_valid_ratings.sort_values(by='RATING', ascending=False).head(10)

#  Display selected columns
top_10_movies_display = top_10_movies[['MOVIES', 'RATING', 'YEAR', 'GENRE']]
print(top_10_movies_display.reset_index(drop=True))


top_10_movies = df_valid_ratings.sort_values(by='RATING', ascending=False).head(10)

#  Select relevant columns for display
top_10_movies_display = top_10_movies[['MOVIES', 'RATING', 'YEAR', 'GENRE']].reset_index(drop=True)

#  Plot a horizontal bar chart
plt.figure(figsize=(12, 6))
plt.barh(top_10_movies_display['MOVIES'], top_10_movies_display['RATING'], color='teal', edgecolor='black')
plt.xlabel('Rating')
plt.title('Top 10 Rated Movies')
plt.gca().invert_yaxis()  # Show highest rated at the top
plt.tight_layout()
plt.show()

print("Question 5  Show which genre of movie is the most common")

df_genres = df.dropna(subset=['GENRE'])

# Split genre strings into lists and explode into separate rows
all_genres = df_genres['GENRE'].str.split(', ').explode()

# Count frequency of each genre
genre_counts = all_genres.value_counts()


plt.figure(figsize=(12, 6))
plt.bar(genre_counts.index, genre_counts.values, color='skyblue', edgecolor='black')


plt.title('Most Common Movie Genres')
plt.xlabel('Genre')
plt.ylabel('Number of Movies')
plt.xticks(rotation=45, ha='right')  # Rotate genre labels
plt.tight_layout()
plt.show()

print("Question 6 how the average rating per genre")

df_clean = df.dropna(subset=['RATING', 'GENRE'])

# Split genre strings and explode into individual rows
df_clean['GENRE'] = df_clean['GENRE'].str.split(', ')
df_exploded = df_clean.explode('GENRE')

#  Group by genre and calculate average rating, then sort alphabetically
avg_ratings = df_exploded.groupby('GENRE')['RATING'].mean().sort_index()


plt.figure(figsize=(12, 6))
plt.bar(avg_ratings.index, avg_ratings.values, color='cornflowerblue', edgecolor='black')

plt.title('Average Movie Rating per Genre (Alphabetical)')
plt.xlabel('Genre')
plt.ylabel('Average Rating')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

print("Question 7 Show if there is any correlation between runtime and rating of the movie")


#Calculate the correlation coefficient
correlation = df_clean['RunTime'].corr(df_clean['RATING'])

#  Create a scatter plot with regression line
plt.figure(figsize=(10, 6))
sns.regplot(x='RunTime', y='RATING', data=df_clean, scatter_kws={'alpha':0.5}, line_kws={'color':'red'})


plt.title(f'Correlation Between Runtime and Rating (r = {correlation:.2f})')
plt.xlabel('Runtime (minutes)')
plt.ylabel('Rating')
plt.grid(True)
plt.tight_layout()
plt.show()

print("Question 8 Compare if certain genres produce higher rated movie")
df_clean = df.dropna(subset=['RATING', 'GENRE'])

# Split multi-genre entries and explode them into individual rows
df_clean['GENRE'] = df_clean['GENRE'].str.split(', ')
df_exploded = df_clean.explode('GENRE')

# Group by genre to calculate average rating and movie count
genre_stats = df_exploded.groupby('GENRE')['RATING'].agg(['mean', 'count']).sort_values(by='mean', ascending=False)

# Filter out genres
genre_stats_filtered = genre_stats[genre_stats['count'] >= 5]

# Plot average ratings for each genre
plt.figure(figsize=(12, 6))
plt.bar(genre_stats_filtered.index, genre_stats_filtered['mean'], color='lightgreen', edgecolor='black')

#Add labels and title
plt.title('Average Movie Rating by Genre (Min. 5 Movies)')
plt.xlabel('Genre')
plt.ylabel('Average Rating')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

print("question 9: Compare if newer movies get higher ratings than older movies")

df_clean['YEAR'] = pd.to_numeric(df_clean['YEAR'], errors='coerce')

# Group by year and calculate average rating
ratings_by_year = df_clean.groupby('YEAR')['RATING'].mean().reset_index()

# Plot the average rating by year with a regression trend line
plt.figure(figsize=(12, 6))
sns.regplot(x='YEAR', y='RATING', data=ratings_by_year, scatter_kws={'alpha': 0.5}, line_kws={'color': 'red'})

plt.title('Do Newer Movies Get Higher Ratings?')
plt.xlabel('Release Year')
plt.ylabel('Average Rating')
plt.grid(True)
plt.tight_layout()
plt.show()

print("Question 10: Show which genres have the highest gross")
df_clean = df.dropna(subset=['GENRE', 'Gross'])

#  Convert 'GENRE' to string to avoid errors with .str
df_clean['GENRE'] = df_clean['GENRE'].astype(str)

# Split multiple genres and explode them into separate rows
df_clean['GENRE'] = df_clean['GENRE'].str.split(', ')
df_exploded = df_clean.explode('GENRE')

# Group by genre and sum the gross earnings
genre_gross = df_exploded.groupby('GENRE')['Gross'].sum().sort_values(ascending=False)


plt.figure(figsize=(12, 6))
plt.bar(genre_gross.index, genre_gross.values, color='goldenrod', edgecolor='black')
plt.title('Total Gross Earnings by Genre')
plt.xlabel('Genre')
plt.ylabel('Total Gross ($)')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()
